{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8b41ccfd-71c6-4750-acf4-60b8cb919841",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to the Genetic Algorithm Simulation!\n",
      "Enter the values for chromosomes (Each chromosome should have 10 binary values).\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter chromosome 1 (10 binary values separated by space):  0 1 0 1 0 1 0 1 0 1\n",
      "Enter chromosome 2 (10 binary values separated by space):  1 1 1 1 1 0 0 0 0 0\n",
      "Enter chromosome 3 (10 binary values separated by space):  1 0 0 0 0 0 0 0 0 1\n",
      "Enter chromosome 4 (10 binary values separated by space):  1 1 1 1 0 0 0 0 0 1\n",
      "Enter chromosome 5 (10 binary values separated by space):  0 0 0 1 0 0 0 1 1 0\n",
      "Enter chromosome 6 (10 binary values separated by space):  0 0 0 0 1 1 1 1 1 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial Population (S) = [[0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 0, 0, 1, 1, 1, 1, 1, 1]]\n",
      "Fitness of each individual:\n",
      "[5, 5, 2, 5, 3, 6]\n",
      "Total fitness: 26\n",
      "Arranging in Descending order based on fitness:\n",
      "Sorted Population (desc) = [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 0, 0, 0, 0, 0, 0, 0, 1]]\n",
      "Crossover after 2 points\n",
      "After Crossover between S1, S4 and S5, S6:\n",
      "s1 = [0, 0, 0, 1, 0, 1, 0, 1, 0, 1] s4 = [0, 1, 0, 0, 1, 1, 1, 1, 1, 1]\n",
      "s5 = [0, 0, 0, 0, 0, 0, 0, 0, 0, 1] s6 = [1, 0, 0, 1, 0, 0, 0, 1, 1, 0]\n",
      "s = [[0, 0, 0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 1, 0, 0, 0, 0, 0], [1, 1, 1, 1, 0, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 0, 0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1, 1, 0]]\n",
      "Crossover between S2 and S3 after the 4th point:\n",
      "After Crossover between S2 and S3:\n",
      "s2 = [1, 1, 1, 1, 0, 0, 0, 0, 0, 1] s3 = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0]\n",
      "Mutation:\n",
      "Population after mutation:\n",
      "[[1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 0, 0, 0, 1], [0, 0, 1, 1, 1, 0, 0, 0, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 0, 0, 0, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1, 0]]\n",
      "Fitness of each individual:\n",
      "[6, 3, 3, 7, 3, 4]\n",
      "Total fitness: 26\n",
      "Fitness is greater before applying Genetic Algorithm\n"
     ]
    }
   ],
   "source": [
    "# Function to take input from user for initial population\n",
    "def get_population():\n",
    "    population = []\n",
    "    print(\"Enter the values for chromosomes (Each chromosome should have 10 binary values).\")\n",
    "    for i in range(6):  # We want 6 individuals in the population\n",
    "        while True:\n",
    "            individual = input(f\"Enter chromosome {i+1} (10 binary values separated by space): \")\n",
    "            individual = individual.strip().split()\n",
    "            \n",
    "            # Ensure the individual contains exactly 10 binary values\n",
    "            if len(individual) == 10 and all(val in ['0', '1'] for val in individual):\n",
    "                population.append([int(val) for val in individual])  # Convert to integers and add to population\n",
    "                break\n",
    "            else:\n",
    "                print(\"Invalid input. Please enter exactly 10 binary values (0 or 1).\")\n",
    "    \n",
    "    return population\n",
    "\n",
    "# Function to calculate fitness: count of 1s in each row\n",
    "def calfitness(S):\n",
    "    fit = []\n",
    "    total = 0\n",
    "    print(\"Fitness of each individual:\")\n",
    "    for i in S:\n",
    "        fit.append(i.count(1))  # Count of 1s in the row\n",
    "        total += i.count(1)\n",
    "    print(fit)\n",
    "    print(\"Total fitness:\", total)\n",
    "    return fit\n",
    "\n",
    "# Main execution\n",
    "print(\"Welcome to the Genetic Algorithm Simulation!\")\n",
    "S = get_population()  # Get population input from the user\n",
    "\n",
    "print(\"Initial Population (S) =\", S)\n",
    "\n",
    "# Calculate fitness of initial population\n",
    "fit = calfitness(S)\n",
    "\n",
    "# Sorting in descending order based on the count of 1s (fitness)\n",
    "print(\"Arranging in Descending order based on fitness:\")\n",
    "desc = S.copy()  # Make a copy of the population list\n",
    "\n",
    "for i in range(len(desc)):\n",
    "    for j in range(i + 1, len(desc)):\n",
    "        if desc[i].count(1) < desc[j].count(1):\n",
    "            desc[i], desc[j] = desc[j], desc[i]\n",
    "\n",
    "print(\"Sorted Population (desc) =\", desc)\n",
    "\n",
    "# Crossover (2-point) - previously crossover between S1 and S4, and S5 and S6\n",
    "print(\"Crossover after 2 points\")\n",
    "for i in range(3):\n",
    "    desc[0][i], desc[3][i] = desc[3][i], desc[0][i]  # Swap between individuals\n",
    "    desc[4][i], desc[5][i] = desc[5][i], desc[4][i]\n",
    "\n",
    "desc[0], desc[3] = desc[3], desc[0]  # Swap individuals\n",
    "desc[4], desc[5] = desc[5], desc[4]  # Swap individuals\n",
    "\n",
    "# Display new population after crossover between S1 and S4, S5 and S6\n",
    "print(\"After Crossover between S1, S4 and S5, S6:\")\n",
    "print(\"s1 =\", desc[0], \"s4 =\", desc[3])\n",
    "print(\"s5 =\", desc[4], \"s6 =\", desc[5])\n",
    "print(\"s =\", desc)\n",
    "\n",
    "# New crossover (S2 and S3 after 4th point)\n",
    "print(\"Crossover between S2 and S3 after the 4th point:\")\n",
    "for i in range(4, len(desc[1])):\n",
    "    desc[1][i], desc[2][i] = desc[2][i], desc[1][i]  # Swap from 4th point onwards\n",
    "\n",
    "print(\"After Crossover between S2 and S3:\")\n",
    "print(\"s2 =\", desc[1], \"s3 =\", desc[2])\n",
    "\n",
    "# Mutation: Flip the first two bits of each individual\n",
    "print(\"Mutation:\")\n",
    "for i in range(6):\n",
    "    for j in range(2):  # Flip the first two bits in each individual\n",
    "        if desc[i][j] == 0:\n",
    "            desc[i][j] = 1\n",
    "        else:\n",
    "            desc[i][j] = 0\n",
    "\n",
    "print(\"Population after mutation:\")\n",
    "print(desc)\n",
    "\n",
    "# Calculate fitness of the new population\n",
    "fit2 = calfitness(desc)\n",
    "\n",
    "# Comparing fitness before and after applying Genetic Algorithm\n",
    "if sum(fit2) > sum(fit):\n",
    "    print(\"Fitness is greater after applying Genetic Algorithm\")\n",
    "else:\n",
    "    print(\"Fitness is greater before applying Genetic Algorithm\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "87422428-09cc-470d-b834-3edf425efd5c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
